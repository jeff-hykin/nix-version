{"frozen":{"name":"urweb","shortDescription":"Ur/Web supports construction of dynamic web applications backed by SQL databases.","longDescription":"Ur is a programming language in the tradition of ML and Haskell, but\nfeaturing a significantly richer type system. Ur is functional, pure,\nstatically-typed, and strict. Ur supports a powerful kind of\nmetaprogramming based on row types.\n\nUr/Web is Ur plus a special standard library and associated rules for\nparsing and optimization. Ur/Web supports construction of dynamic web\napplications backed by SQL databases. The signature of the standard\nlibrary is such that well-typed Ur/Web programs \"don't go wrong\" in a\nvery broad sense. Not only do they not crash during particular page\ngenerations, but they also may not:\n\n* Suffer from any kinds of code-injection attacks\n* Return invalid HTML\n* Contain dead intra-application links\n* Have mismatches between HTML forms and the fields expected by their handlers\n* Include client-side code that makes incorrect assumptions about the \"AJAX\"-style services that the remote web server provides\n* Attempt invalid SQL queries\n* Use improper marshaling or unmarshaling in communication with SQL databases or between browsers and web servers\n\nThis type safety is just the foundation of the Ur/Web methodology. It is\nalso possible to use metaprogramming to build significant application pieces\nby analysis of type structure. For instance, the demo includes an ML-style\nfunctor for building an admin interface for an arbitrary SQL table. The\ntype system guarantees that the admin interface sub-application that comes\nout will always be free of the above-listed bugs, no matter which well-typed\ntable description is given as input.\n\nThe Ur/Web compiler also produces very efficient object code that does not use\ngarbage collection. These compiled programs will often be even more efficient\nthan what most programmers would bother to write in C. For example, the\nstandalone web server generated for the demo uses less RAM than the bash shell.\nThe compiler also generates JavaScript versions of client-side code, with no need\nto write those parts of applications in a different language.\n","versionString":"20130421","homepage":"http://www.impredicative.com/ur/","license":{"fullName":"BSD license (3 clause)","shortName":"BSD-3","url":"http://opensource.org/licenses/BSD-3-Clause"},"versionNumberList":[]},"flexible":{"sources":[{"git":"https://github.com/NixOS/nixpkgs.git","commit":"ad4156e4973abe0c306617c033169bc9c6fa44e1","attributePath":["urweb"],"position":null,"date":"2013-09-20"}],"platforms":["i686-linux","x86_64-linux"]}}